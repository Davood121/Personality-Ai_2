#!/usr/bin/env python3
"""
Show what your AI has learned and searched for so far
"""

import json
import os
from datetime import datetime
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from collections import defaultdict

console = Console()

def load_json_file(filepath):
    """Load JSON file safely"""
    try:
        if os.path.exists(filepath):
            with open(filepath, 'r', encoding='utf-8') as f:
                return json.load(f)
    except Exception as e:
        console.print(f"[red]Error loading {filepath}: {e}[/red]")
    return {}

def show_auto_understanding():
    """Show auto-understanding data"""
    data = load_json_file("memory/auto_understanding.json")
    
    console.print("[bold blue]🧠 Auto-Understanding System[/bold blue]")
    
    if not data:
        console.print("[yellow]No auto-understanding data found[/yellow]")
        return
    
    # Question patterns learned
    patterns = data.get('question_patterns', {})
    console.print(f"📊 Question types learned: {len(patterns)}")
    
    for q_type, pattern_list in patterns.items():
        console.print(f"  • {q_type}: {len(pattern_list)} patterns")
    
    # Topics learned
    topics = data.get('topic_knowledge', {})
    total_topics = sum(len(topic_dict) for topic_dict in topics.values())
    console.print(f"📚 Total topics learned: {total_topics}")
    
    for q_type, topic_dict in topics.items():
        console.print(f"  • {q_type}: {len(topic_dict)} topics")
        for topic, info in list(topic_dict.items())[:3]:  # Show first 3
            success_rate = info.get('success_rate', 0) * 100
            console.print(f"    - {topic} (success: {success_rate:.0f}%)")
    
    # Learning sessions
    sessions = data.get('auto_search_history', [])
    console.print(f"🎯 Learning sessions: {len(sessions)}")
    
    if sessions:
        console.print("\n[cyan]Recent auto-learning:[/cyan]")
        for session in sessions[-5:]:  # Last 5 sessions
            timestamp = session.get('timestamp', '')[:19].replace('T', ' ')
            question = session.get('question', '')
            q_type = session.get('question_type', '')
            topics = session.get('topics_learned', [])
            success = "✅" if session.get('success', False) else "❌"
            
            console.print(f"  {success} [{timestamp}] {q_type}: '{question}'")
            console.print(f"      Topics: {', '.join(topics)}")

def show_knowledge_base_summary():
    """Show knowledge base summary"""
    data = load_json_file("memory/knowledge_base.json")
    
    console.print("\n[bold green]📖 Knowledge Base Summary[/bold green]")
    
    if not data:
        console.print("[yellow]No knowledge base found[/yellow]")
        return
    
    console.print(f"📚 Total knowledge entries: {len(data)}")
    
    # Categorize by source type
    source_types = defaultdict(int)
    topics = defaultdict(int)
    recent_entries = []
    
    for entry_id, entry in data.items():
        # Count source types
        sources = entry.get('information', {}).get('sources', [])
        for source in sources:
            source_type = source.get('source_type', 'unknown')
            source_types[source_type] += 1
        
        # Count topics
        topic = entry.get('topic', 'unknown')
        topics[topic] += 1
        
        # Collect recent entries
        timestamp = entry.get('information', {}).get('timestamp', 0)
        recent_entries.append((timestamp, topic, entry_id))
    
    # Show source distribution
    console.print("\n[cyan]📊 Sources:[/cyan]")
    for source_type, count in source_types.items():
        console.print(f"  • {source_type}: {count} entries")
    
    # Show top topics
    console.print("\n[cyan]🏷️ Top Topics:[/cyan]")
    top_topics = sorted(topics.items(), key=lambda x: x[1], reverse=True)[:10]
    for topic, count in top_topics:
        console.print(f"  • {topic}: {count} entries")
    
    # Show recent learning
    console.print("\n[cyan]🕒 Recent Learning:[/cyan]")
    recent_entries.sort(reverse=True)
    for timestamp, topic, entry_id in recent_entries[:5]:
        if timestamp > 0:
            dt = datetime.fromtimestamp(timestamp)
            console.print(f"  • {dt.strftime('%Y-%m-%d %H:%M')} - {topic} ({entry_id[:8]}...)")

def show_questions_generated():
    """Show questions generated by AI"""
    data = load_json_file("memory/questions_archive.json")
    
    console.print("\n[bold magenta]❓ Questions Generated[/bold magenta]")
    
    if not data:
        console.print("[yellow]No questions archive found[/yellow]")
        return
    
    console.print(f"🎯 Total questions generated: {len(data)}")
    
    # Categorize questions
    categories = defaultdict(int)
    topics = defaultdict(int)
    answered_count = 0
    
    for question in data:
        category = question.get('category', 'unknown')
        topic = question.get('topic', 'unknown')
        answered = question.get('answered', False)
        
        categories[category] += 1
        topics[topic] += 1
        if answered:
            answered_count += 1
    
    console.print(f"✅ Questions answered: {answered_count}")
    console.print(f"⏳ Questions pending: {len(data) - answered_count}")
    
    # Show categories
    console.print("\n[cyan]📊 Question Categories:[/cyan]")
    for category, count in sorted(categories.items(), key=lambda x: x[1], reverse=True)[:5]:
        console.print(f"  • {category}: {count} questions")
    
    # Show recent questions
    console.print("\n[cyan]🕒 Recent Questions:[/cyan]")
    recent_questions = sorted(data, key=lambda x: x.get('generated_at', ''), reverse=True)[:5]
    for q in recent_questions:
        question_text = q.get('question', '')[:60] + "..." if len(q.get('question', '')) > 60 else q.get('question', '')
        topic = q.get('topic', '')
        category = q.get('category', '')
        console.print(f"  • [{category}] {question_text}")
        console.print(f"    Topic: {topic}")

def show_personality_status():
    """Show AI personality status"""
    data = load_json_file("memory/personality_profile.json")
    
    console.print("\n[bold yellow]🎭 AI Personality Status[/bold yellow]")
    
    if not data:
        console.print("[yellow]No personality data found[/yellow]")
        return
    
    traits = data.get('traits', {})
    console.print("🌟 Personality Traits:")
    for trait, value in traits.items():
        bar = "█" * int(value * 10) + "░" * (10 - int(value * 10))
        console.print(f"  • {trait.capitalize()}: {bar} {value:.2f}")
    
    emotional_state = data.get('emotional_state', 'unknown')
    complexity_level = data.get('complexity_level', 0)
    console.print(f"\n😊 Emotional State: {emotional_state}")
    console.print(f"📈 Complexity Level: {complexity_level:.2f}")

def main():
    """Main function to show all AI knowledge"""
    console.print("[bold blue]🤖 Your AI's Learning Summary[/bold blue]")
    console.print("=" * 50)
    
    show_auto_understanding()
    show_knowledge_base_summary()
    show_questions_generated()
    show_personality_status()
    
    console.print("\n[bold green]✨ Your AI is continuously learning and growing![/bold green]")

if __name__ == "__main__":
    main()
